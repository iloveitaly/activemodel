from typing import Protocol, TypeVar, Any, List, Optional, Union, Generic
import sqlmodel as sm

T = TypeVar('T', bound=sm.SQLModel, covariant=True)

class SQLAlchemyQueryMethods(Protocol, Generic[T]):
    """Protocol defining SQLAlchemy query methods forwarded by QueryWrapper.__getattr__"""
    def add_columns(self, entities) -> "SQLAlchemyQueryMethods[T]": ...
    def add_cte(self, ctes, nest_here=False) -> "SQLAlchemyQueryMethods[T]": ...
    def alias(self, name=None, flat=False) -> "SQLAlchemyQueryMethods[T]": ...
    def as_scalar(self, ) -> "SQLAlchemyQueryMethods[T]": ...
    def column(self, column) -> "SQLAlchemyQueryMethods[T]": ...
    def compare(self, other, kw) -> "SQLAlchemyQueryMethods[T]": ...
    def compile(self, bind=None, dialect=None, kw) -> "SQLAlchemyQueryMethods[T]": ...
    def correlate(self, fromclauses) -> "SQLAlchemyQueryMethods[T]": ...
    def correlate_except(self, fromclauses) -> "SQLAlchemyQueryMethods[T]": ...
    def corresponding_column(self, column, require_embedded=False) -> "SQLAlchemyQueryMethods[T]": ...
    def cte(self, name=None, recursive=False, nesting=False) -> "SQLAlchemyQueryMethods[T]": ...
    def distinct(self, expr) -> "SQLAlchemyQueryMethods[T]": ...
    def except_(self, other) -> "SQLAlchemyQueryMethods[T]": ...
    def except_all(self, other) -> "SQLAlchemyQueryMethods[T]": ...
    def execution_options(self, kw) -> "SQLAlchemyQueryMethods[T]": ...
    def exists(self, ) -> "SQLAlchemyQueryMethods[T]": ...
    def fetch(self, count, with_ties=False, percent=False) -> "SQLAlchemyQueryMethods[T]": ...
    def filter(self, criteria) -> "SQLAlchemyQueryMethods[T]": ...
    def filter_by(self, kwargs) -> "SQLAlchemyQueryMethods[T]": ...
    def from_statement(self, statement) -> "SQLAlchemyQueryMethods[T]": ...
    def get_children(self, kw) -> "SQLAlchemyQueryMethods[T]": ...
    def get_execution_options(self, ) -> "SQLAlchemyQueryMethods[T]": ...
    def get_final_froms(self, ) -> "SQLAlchemyQueryMethods[T]": ...
    def get_label_style(self, ) -> "SQLAlchemyQueryMethods[T]": ...
    def group_by(self, _GenerativeSelect__first=_NoArg.NO_ARG, clauses) -> "SQLAlchemyQueryMethods[T]": ...
    def having(self, having) -> "SQLAlchemyQueryMethods[T]": ...
    def intersect(self, other) -> "SQLAlchemyQueryMethods[T]": ...
    def intersect_all(self, other) -> "SQLAlchemyQueryMethods[T]": ...
    def is_derived_from(self, fromclause) -> "SQLAlchemyQueryMethods[T]": ...
    def join(self, target, onclause=None, isouter=False, full=False) -> "SQLAlchemyQueryMethods[T]": ...
    def join_from(self, from_, target, onclause=None, isouter=False, full=False) -> "SQLAlchemyQueryMethods[T]": ...
    def label(self, name) -> "SQLAlchemyQueryMethods[T]": ...
    def lateral(self, name=None) -> "SQLAlchemyQueryMethods[T]": ...
    def limit(self, limit) -> "SQLAlchemyQueryMethods[T]": ...
    def memoized_instancemethod(self, ) -> "SQLAlchemyQueryMethods[T]": ...
    def offset(self, offset) -> "SQLAlchemyQueryMethods[T]": ...
    def options(self, options) -> "SQLAlchemyQueryMethods[T]": ...
    def order_by(self, _GenerativeSelect__first=_NoArg.NO_ARG, clauses) -> "SQLAlchemyQueryMethods[T]": ...
    def outerjoin(self, target, onclause=None, full=False) -> "SQLAlchemyQueryMethods[T]": ...
    def outerjoin_from(self, from_, target, onclause=None, full=False) -> "SQLAlchemyQueryMethods[T]": ...
    def params(self, _ClauseElement__optionaldict=None, kwargs) -> "SQLAlchemyQueryMethods[T]": ...
    def prefix_with(self, prefixes, dialect='*') -> "SQLAlchemyQueryMethods[T]": ...
    def reduce_columns(self, only_synonyms=True) -> "SQLAlchemyQueryMethods[T]": ...
    def replace_selectable(self, old, alias) -> "SQLAlchemyQueryMethods[T]": ...
    def scalar_subquery(self, ) -> "SQLAlchemyQueryMethods[T]": ...
    def select(self, arg, kw) -> "SQLAlchemyQueryMethods[T]": ...
    def select_from(self, froms) -> "SQLAlchemyQueryMethods[T]": ...
    def self_group(self, against=None) -> "SQLAlchemyQueryMethods[T]": ...
    def set_label_style(self, style) -> "SQLAlchemyQueryMethods[T]": ...
    def slice(self, start, stop) -> "SQLAlchemyQueryMethods[T]": ...
    def subquery(self, name=None) -> "SQLAlchemyQueryMethods[T]": ...
    def suffix_with(self, suffixes, dialect='*') -> "SQLAlchemyQueryMethods[T]": ...
    def union(self, other) -> "SQLAlchemyQueryMethods[T]": ...
    def union_all(self, other) -> "SQLAlchemyQueryMethods[T]": ...
    def unique_params(self, _ClauseElement__optionaldict=None, kwargs) -> "SQLAlchemyQueryMethods[T]": ...
    def where(self, whereclause) -> "SQLAlchemyQueryMethods[T]": ...
    def with_for_update(self, nowait=False, read=False, of=None, skip_locked=False, key_share=False) -> "SQLAlchemyQueryMethods[T]": ...
    def with_hint(self, selectable, text, dialect_name='*') -> "SQLAlchemyQueryMethods[T]": ...
    def with_only_columns(self, entities, maintain_column_froms=False, _Select__kw) -> "SQLAlchemyQueryMethods[T]": ...
    def with_statement_hint(self, text, dialect_name='*') -> "SQLAlchemyQueryMethods[T]": ...